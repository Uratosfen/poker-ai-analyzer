import streamlit as st
import openai
import json

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è API ===
if "OPENAI_API_KEY" not in st.secrets:
    st.error("‚ùå –ö–ª—é—á API –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.")
    st.stop()

openai.api_key = st.secrets["OPENAI_API_KEY"]

# === –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.title("üß† Poker AI –ü–æ–º—ñ—á–Ω–∏–∫")
st.markdown("–ó–∞–≤–∞–Ω—Ç–∞–∂ —Å–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥—ñ—é —ñ —Ä–æ–∑–¥–∞—á—ñ ‚Äî –æ—Ç—Ä–∏–º–∞–π –∞–Ω–∞–ª—ñ–∑ –∑ GPT")

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ ===
strategy_file = st.file_uploader("üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó (JSON)", type=["json"])
hands_file = st.file_uploader("üÉè –ó–∞–≤–∞–Ω—Ç–∞–∂ —Ñ–∞–π–ª —Ä–æ–∑–¥–∞—á (TXT)", type=["txt"])

if strategy_file and hands_file:
    try:
        strategy_data = json.load(strategy_file)
        strategy_text = json.dumps(strategy_data, indent=2)
    except json.JSONDecodeError:
        st.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ —Ü–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π JSON.")
        st.stop()

    hands_text = hands_file.read().decode("utf-8")
    if not hands_text.strip():
        st.error("‚ùå –§–∞–π–ª —Ä–æ–∑–¥–∞—á –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        st.stop()

    hands = hands_text.strip().split("\n\n")
    max_hands = 5  # –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä–æ–∑–¥–∞—á
    hands = hands[:max_hands]

    st.success("‚úÖ –§–∞–π–ª–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –ü–æ—á–∏–Ω–∞—î–º–æ –∞–Ω–∞–ª—ñ–∑...")

    if "analysis_results" not in st.session_state:
        st.session_state.analysis_results = []

    progress_bar = st.progress(0)
    for i, hand in enumerate(hands):
        if not hand.strip():
            continue

        st.subheader(f"–†–æ–∑–¥–∞—á–∞ {i+1}")
        st.code(hand, language="text")

        with st.spinner("–ê–Ω–∞–ª—ñ–∑—É—î–º–æ..."):
            prompt = f"""
            Analyze the following poker hand based on the player's strategy below.

            Player's Strategy:
            {strategy_text}

            Poker Hand:
            {hand}

            Identify any deviations from the strategy, label them as 'mistakes', and suggest better lines.
            """

            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "You are a professional poker coach."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.3,
                )
                analysis = response.choices[0].message["content"]
                st.session_state.analysis_results.append(analysis)
                st.markdown(f"**–ê–Ω–∞–ª—ñ–∑:**\n\n{analysis}")
            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {e}")

        progress_bar.progress((i + 1) / len(hands))

    if st.session_state.analysis_results:
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É")
        for result in st.session_state.analysis_results:
            st.markdown(result)
else:
    st.info("‚¨ÜÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂ –æ–±–∏–¥–≤–∞ —Ñ–∞–π–ª–∏ –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É.")
